generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model WordRelation {
    wordId        String
    relatedWordId String

    word        Word @relation("WordRelations", fields: [wordId], references: [id])
    relatedWord Word @relation("WordRelatedTo", fields: [relatedWordId], references: [id])

    @@unique([wordId, relatedWordId])
}

model Tag {
    id        String     @id @default(uuid())
    name      String
    taggables Taggable[]
}

model Taggable {
    tagId  String
    wordId String

    tag  Tag  @relation(fields: [tagId], references: [id])
    word Word @relation(fields: [wordId], references: [id])

    @@id([tagId, wordId])
}

model Category {
    id           String        @id @default(uuid())
    name         String
    categorables Categorable[]
}

model Categorable {
    wordId     String
    categoryId String

    word     Word     @relation(fields: [wordId], references: [id])
    category Category @relation(fields: [categoryId], references: [id])

    @@id([wordId, categoryId])
}

model Word {
    id           String         @id @default(uuid())
    name         String
    description  String
    lang         String
    relations    WordRelation[] @relation("WordRelations")
    relatedTo    WordRelation[] @relation("WordRelatedTo")
    taggables    Taggable[]
    categorables Categorable[]
    userId       String
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    ADMIN
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    words         Word[]
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
